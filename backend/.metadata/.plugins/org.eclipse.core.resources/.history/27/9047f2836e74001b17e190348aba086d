package com.hntecnologia.document.resources;

import java.net.URI;
import java.nio.file.Path;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.servlet.support.ServletUriComponentsBuilder;

import com.hntecnologia.document.dto.DocumentStorageDTO;
import com.hntecnologia.document.services.DocumentStorageService;

@RestController
@RequestMapping(value = "/documents")
public class DocumentStorageResource {
	
	@Autowired
	private DocumentStorageService service;
	
	@GetMapping
	public ResponseEntity<List<DocumentStorageDTO>> findAll() {
		List<DocumentStorageDTO> list = service.findAll();
		return ResponseEntity.ok().body(list);
	}
	
	@GetMapping(value = "/{id}")
	public ResponseEntity<DocumentStorageDTO> findById(@PathVariable Long id) {
		DocumentStorageDTO dto = service.findById(id);
		return ResponseEntity.ok().body(dto);
	}
	
	@PostMapping
	public ResponseEntity<DocumentStorageDTO> insert(@RequestBody DocumentStorageDTO dto) {
		dto = service.insert(dto);
		URI uri = ServletUriComponentsBuilder.fromCurrentRequest().path("/{id}").buildAndExpand(dto.getId()).toUri();
		return ResponseEntity.created(uri).body(dto);
	}
	
	@PutMapping(value = "/{id}")
	public ResponseEntity<DocumentStorageDTO> update(@PathVariable Long id, @RequestBody DocumentStorageDTO dto) {
		dto = service.update(id, dto);
		return ResponseEntity.ok().body(dto);
	}
	
	@DeleteMapping(value = "/{id}")
	public ResponseEntity<DocumentStorageDTO> delete(@PathVariable Long id) {
		service.delete(id);
		return ResponseEntity.noContent().build();
	}
	
	@PostMapping(value = "/{id}/uploadFile")
	public ResponseEntity<Void> uploadProfilePicture(@RequestParam(name = "file") MultipartFile file, @PathVariable Long id) {
		Path path = service.saveDocument(file, id);
		return ResponseEntity.created(path.toUri()).build();
	}

}
